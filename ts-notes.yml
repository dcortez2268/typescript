*************************************************
TYPESCRIPT BASICS AND BASIC TYPES:
*************************************************

typescript:
    js + static type system
    allows us to prevent unwanted behavior at runtime

type system:
    helps us catch errors during development
    uses type annotations to analyze our code
    only active during development
    doesn't provide any performance optimization

execution flow:
    typescript code (js + type annotations) => typescript compiler => js code

advantages:
    adds types, next-gen js features, non js features like interfaces or generics, meta programming features like decorators, rich configuraiton options, modern tooling that helps even in non typescript projects
    checks types and for other errors during compile time vs js having to check at runtime

INSTALLS:
  npm i -g typescript ts-node: typescript library, ts-node is cli tool, call with tsc command

PRIMITIVE TYPES: 
  core primitive types in typescript are all lowercase!
  types are inferred when declaring variables, although you can explicitly set the type, it is better practice to let ts infer the types
 
  number: no differentiation between integers or floats
  string:
  boolean: true, false, no truthy or falsy values
  object: any js object, more specific types of object are possible
  array:
  tuple: added by typescript, fixed length and fixed type array, need to explicitly define when used in object
  enum: added by ts, automatically enumerated global constant identifiers
  any: any kind of value, no specific type assignment, just like js, avoid using
 
NON-PRIMITIVE TYPES: 
  Union: 
    allows ts to accept more than one type for a variable, also you can point the reference variable to point to other applicable types even after it has been assigned
  literal: 
    defines exact value a variable should hold, often combined with unions to provide a set of accepted values
  aliases/ custom types: 
    allows you to create a custom type variable for types you repeatedly define, can implement objects as well
  function return type: 
    return type of variable or void if does not return a value, 
    void type like a doc suggestion because not enforced by compiler
  function type: 
    allows you to define function type, as well as function signature, can be used to implement type checking on callbacks as well
  unknown type: 
    like the any type, but a bit more restrictive
    requires type check to assign a ref var of fixed type to a reference variable of unknown type
    better than using any because it is a bit more specific
  never return type:
    more strict than void,
    used in situations where you will never have a return value and does not allow you to still return values like void does

-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
*************************************************
THE TYPESCRIPT COMPILER AND ITS CONFIGURATION:
*************************************************

USING WATCH MODE: 
  allows ts compiler to auto compile after any changes are made to a specific file
  tsc fileName.ts --watch

AUTO COMPILING ENTIRE PROJECT/ MULTIPLE FILES:
  tsc --init: 
    creates a tsconfig.json file where command ran
    tsc --watch: 
      run at root and compiles all ts files in project
  tsconfig.json file: 
    stores all the configuration options for project

SETTING COMPILER OPTIONS:
  "compilerOptions": options within tsconfig.json for describing how a files are being compiled
  options:
    target: 
      js version you want to compile code to
    lib: 
      allows you to specify which library files to be included
    allowJs:  
      Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. use when you don't want to use typescript for all or some files
    jsx: 
      allows you to check jsx code in react
    declaration: 
      implement if you are going to share your code w others as a library, generates manifest file .d.ts
    sourceMap: 
      helps us w debugging and development, generates corresponding .map file, that generates ts files in browser
    rootDir:
      specifies the root directory of the project
    outDir: 
      sets location where output files should be generated
      keeps same directory structure
    removeComments: 
      omits comments in output file
    noEmit: 
      do not emit js output files
    downlevelIteration: 
      provide full support for iterables for older versions of js, outputs more verbose code
    noEmitOnError:
      set to true to not output any js files if there is compilation error

    strict: 
      true sets all strict options to true
    noImplicitAny: 
      true does not allow implicit any types for parameters, does not care about variables
    strictNullChecks: 
      true does not allow values that may be potentially null, 
      set potentially null variables explicitly with ! after variable if you know variable will not be null
      better practice would be to wrap code with truthy if check on variable
    strictFunctionTypes: 
      true sets checking of function types, could be useful when you are working with classes and inheritance 
    strictBindCallApply: 
      true allows check that bind or call or apply works with your code

    code quality options:
      noUnusedLocals, noUnusedParameters, noImplicitReturns 

-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
*************************************************
CLASSES AND INTERFACES:
*************************************************
  see ./classes-and-interfaces/app.ts for:
    classes, 
    constructor fns, 
    this keyword, 
    private/public access modifiers, 
    shorthand initialization in constructor, 
    readonly properties, 
    inheritance,
    protected modifier,
    getters and setters,
    static methods and properties,
    abstract classes:
      use when you want to enforce that certain methods and properties exist on inheriting classes and that new implementation details will have to be provided because functionality is not present in base class
      abstract classes cannot be instantiated themselves
      properties can be abstract as well, value is not given in base class
    singletons and private constructors,
    interfaces:
      basically just a class with all abstract methods and properties 
      can be used as a contract a class can implement and has to adhere to to share common functionality and class can add properties or members
      like a custom type but differences are:
        interfaces can only define structure of an object while types can define more things
        interface is clearer
    extending interfaces,
    using interfaces to implement function types,
    optional parameters and properties in classes and interfaces

-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
*************************************************
ADVANCED TYPING:
*************************************************
  see ./advanced-typing/app.ts for:
    intersection types: 
      allow us to combine intersecting values of multiple types into one type, 
      can accomplish same functionality with interfaces excluding the use of unions
    type guards:
      allow us to provide type checking at compile time on objects that may be of different types
      via 'in' operator:
        if ('privileges' in empObject)
      via 'instanceof' operator:
        if (vehicle instanceof Truck)
        does not work with interfaces
      Discriminated union:
        type of type guard that helps us to implement type guards with union types
        implemented via literal type(enforces common property in every interface, class, or object) and switch case, see file
    type casting:
      allows you to tell typescript that some value is of a specific type where ts is not able to tell type
    index properties:
      allows us to define interfaces or classes that do not have a specific number of properties and name of property is not defined
      helps us write more flexible classes and interfaces
    function overloads,
    optional chaining:
      allows us to safely access nested properties and nested objects in our object by avoiding runtime error if it does not exist 
    nullish coalescing:
      allow us to safely access data that may be null or undefined by using defined data or default value 
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
*************************************************
GENERICS:
*************************************************
  see ./generics/app.ts for:
    generic type:
      a data type that allows you to store or work with data of different types
    generic function,
    generic constraints:
      allows you to place constraints on generic type that are extended from a different type
    keyof constraint:
      constraint that tells ts generic type is a key of another object
    generic classes,
    generic utility types:
      ts comes with many built in utility types, this files covers Readonly and Partial
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
-----------------------------------------------------------------------------------------------:
*************************************************
DECORATORS:
*************************************************
  see ./decorators/app.ts for:
    decorator:
      special kind of function that can be used to modify the behavior of a class, method, property, or parameter 
      Decorators are a powerful feature that allow you to add metadata to your code and change its behavior at runtime 
      decorators are ran when a class is defined, not initialized! they allow you to add additional set up work before code is called
      use cases:
        Validation: 
          You can use decorators to add validation logic to properties or method arguments.
        Logging: 
          You can use decorators to add logging to methods, so that you can see when they are called and what arguments they are called with.
        Caching: 
          You can use decorators to cache the results of expensive computations, so that they don't have to be recalculated each time a method is called.
        Access control: 
          You can use decorators to restrict access to methods and properties based on the user's role.
        Dependency injection: 
          You can use decorators to automatically inject dependencies into a class, making it easier to test and maintain.
    class decorator:
      execution of multiple class decorators:
        decorator factory functions runs first (only the function outside of decorator function) 
        decorator functions then run but from bottom to top
    decorator factory:
      function that returns a decorator function
      allows us to customize parameter values the decorator function implements when it executes
    property decorators,
    accessor and parameter decorators,
    returning and changing a class in a class decorator:
      what you can return depends on what kind of decorator you are working with
      with a class decorator you can return a new class that replaces old class
    other decorator return types:
      you can also return values on accessors and methods
    creating an autobind decorator:
      returning a propertyDescriptor of the method and changing it can change functionality of the method
      in this case, we bound this to the object calling method so event listener does not overwrite this
    validation with decorators:
      
      



      

    

      

